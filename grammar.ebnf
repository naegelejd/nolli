program = { statement } ;
statement = import | struct | iface | decl | assignment | loop |
        cond | call | alias | 'break' | 'continue' | 'return' [ expr ];

import = 'import' ident { ',' ident } | 'from' ident 'import' ident { ',' ident } ;

struct = 'struct' ident '{' { type ident } '}' ;

iface = 'iface' ident '{' { functype ident } '}' ;

loop = 'while' expr block | 'for' ident 'in' expr block ;

cond = 'if' expr block [ 'else' ( cond | block ) ] ;

funcdef = 'func' [type] ident '(' [ params ] ')' block ;
params = type ident { ',' type ident } ;
block = statement | '{' statement { statement } '}' ;

assignment = term assignop expr ;

term = operand | term '[' expr ']' | term '(' args ')' | term '.' term ;

decl = regdecl | shortdecl;
shortdecl = ident ':=' expr ;
regdecl = declkind type declval { ',' declval } ;
declval = ident | ident '=' expr ;
declkind = 'var' | 'const' ;

type = ident | ident '.' ident | listtype | maptype | functype ;
listtype = '[' type ']' ;
maptype = '{' type ',' type '}' ;
functype = 'func' [type] '(' [ anonparams ] ')' block ;
anonparams = type [ ident ] { ',' type [ ident ] } ;

call = expr '(' args ')' ;
args = expr { ',' expr } ;

alias = 'alias' type ident ;

selector = expr '.' expr { '.' expr } ;

expr = unexpr | binexpr ;

unop = '-' | '!' ;
assignop = ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '^=' | '~=' ;
unexpr = unop unexpr | term ;
binexpr = expr binop expr ;
binop = '+' | '-' | '*' | '/' | '%' | '^' | '~' | '==' | '!=' | '<' | '<=' | '>' | '>=' ;

operand = ident | literal | '(' expr ')' ;
literal = bool | char | int | real | string | listlit | maplit | funclit ;
listlit = '[' ']' | '[' expr { ',' expr } ']' ;
pair = expr ':' expr ;
maplit = '{' '}' | '{' pair { ',' pair } '}' ;
funclit = 'func' [type] '(' [ params ] ')' block ;

bool = 'true' | 'false' ;
char = "'" letter "'" ;
int = number { number } ;
real = number { number } "." { number } ;
ident = letter { letter | number } ;
string = '"' { letter } '"' ;

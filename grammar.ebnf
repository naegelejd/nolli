program = { statement } ;
statement = import | struct | iface | decl | assign | loop |
        cond | funcdef | call | 'break' | 'continue' | 'return' expr;
import = 'import' ident { ',' ident } ;
struct = 'struct' '{' { type ident } '}' ;
iface = 'iface' '{' { functype ident } '}' ;
loop = 'while' expr block | 'for' ident 'in' expr block ;
cond = 'if' expr block [ 'else' block ] ;
funcdef = 'func' [type] ident '(' [ params ] ')' block ;
params = type ident { ',' type ident } ;
block = statement | '{' statement { statement } '}' ;
assign = ident assop expr | ident '[' expr ']' assop expr ;
decl = declkind type ident { ',' ident } [ '=' expr { ',' expr } ] ;
declkind = 'var' | 'const' ;
type = ident | listtype | maptype | functype ;
listtype = '[' type ']' ;
maptype = '{' type ',' type '}' ;
functype = 'func' [type] '(' [ anonparams ] ')' block ;
anonparams = type [ ident ] { ',' type } ;
expr = literal | ident | contidx | '(' expr ')' | unexpr | binexpr | call | selector ;
contidx = expr '[' expr ']' ;
call = expr '(' args ')' ;
selector = expr '.' expr { '.' expr } ;
args = expr { ',' expr } ;
unexpr = unop expr ;
unop = '-' | '!' ;
assop = ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '^=' ;
binexpr = expr binop expr ;
binop = '+' | '-' | '*' | '/' | '%' | '^' | '==' | '!=' | '<' | '<=' | '>' | '>=' ;
literal = bool | char | int | real | string | tuple | list | map | anonfunc ;
anonfunc = 'func' [type] '(' [ params ] ')' block ;
tuple = '(' expr { ',' expr } ')' ;
list = '[' ']' | '[' expr { ',' expr } ']' ;
map = '{' '}' | '{' pair { ',' pair } '}' ;
pair = expr ':' expr ;
bool = 'true' | 'false' ;
char = "'" letter "'" ;
int = number { number } ;
real = number { number } "." { number } ;
ident = letter { letter | number } ;
string = '"' { letter } '"' ;
letter = ? UTF-8 char ? ;
number = ? 0 - 9 ? ;
